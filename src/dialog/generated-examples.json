["function Example() {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Dialog\n        open={open}\n        onClose={(evt) => {\n          console.log(evt.detail.action);\n          setOpen(false);\n        }}\n        onClosed={(evt) => console.log(evt.detail.action)}\n      >\n        <DialogTitle>Dialog Title</DialogTitle>\n        <DialogContent>This is a standard dialog.</DialogContent>\n        <DialogActions>\n          <DialogButton action=\"close\">Cancel</DialogButton>\n          <DialogButton action=\"accept\" isDefaultAction>\n            Sweet!\n          </DialogButton>\n        </DialogActions>\n      </Dialog>\n\n      <Button raised onClick={() => setOpen(true)}>\n        Open standard Dialog\n      </Button>\n    </>\n  );\n}","function Example() {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <SimpleDialog\n        title=\"This is a simple dialog\"\n        body=\"You can pass the body prop or children.\"\n        open={open}\n        onClose={(evt) => {\n          console.log(evt.detail.action);\n          setOpen(false);\n        }}\n      />\n\n      <Button raised onClick={() => setOpen(true)}>\n        Open Simple Dialog\n      </Button>\n    </>\n  );\n}","\n  `\n// Create a file that exports your queue\n// myQueue.js\nimport { createDialogQueue } from '@rmwc/dialog';\n\nexport const queue = createDialogQueue();\n\n","\n  `\n// Somewhere at the top level of your app\n// Render the DialogQueue\nimport React from 'react';\nimport { queue } from './myQueue';\n\nexport default function App() {\n  return (\n    <div>\n      ...\n      <DialogQueue\n        dialogs={queue.dialogs}\n        // You can also pass default options to pass to your dialogs\n        // ie, prevent all dialogs from dismissing from a click on the background scrim\n        preventOutsideDismiss\n      />\n    </div>\n  )\n}\n\n\n","\n  `\n// Somewhere else in your app\n// Could be a view, your redux store, anywhere you want...\nimport { queue } from './myQueue';\n\nqueue.alert({\n  title: 'Hi there',\n  body: 'Whats going on?'\n});\n\nqueue.confirm({\n  title: <b>Are you positive?</b>,\n  body: 'You have selected pizza instead icecream!',\n  acceptLabel: 'CONFIRM'\n});\n\nqueue.prompt({\n  title: 'Whats your name?',\n  body: 'Anything will do',\n  acceptLabel: 'Submit',\n  cancelLabel: 'Skip',\n  // For prompts only, you can pass props to the input\n  inputProps: {\n    outlined: true\n  }\n});\n\n","() => {\n  const { dialogs, alert, confirm, prompt } = createDialogQueue();\n\n  function App() {\n    const [response, setResponse] = React.useState('____________');\n\n    const fireAlert = () =>\n      alert({ title: 'Hello!' }).then((res) => setResponse(res));\n\n    const fireConfirm = () =>\n      confirm({}).then((res) => setResponse(res));\n\n    const firePrompt = () =>\n      prompt({ inputProps: { outlined: true } }).then((res) =>\n        setResponse(res)\n      );\n\n    return (\n      <div>\n        <Button label=\"Alert\" onClick={fireAlert} />\n        <Button label=\"Confirm\" onClick={fireConfirm} />\n        <Button label=\"Prompt\" onClick={firePrompt} />\n        <Button\n          label=\"In Sequence\"\n          onClick={() => {\n            fireAlert();\n            fireConfirm();\n            firePrompt();\n          }}\n        />\n\n        <p>\n          Response: <b>{String(response)}</b>\n        </p>\n        <DialogQueue dialogs={dialogs} />\n      </div>\n    );\n  }\n  return <App />;\n}","\n  `\n  // Somewhere at the top level of your app\n  // Render the RMWC Portal\n  // You only have to do this once\n  import React from 'react';\n  import { Portal } from '@rmwc/base';\n\n  export default function App() {\n    return (\n      <div>\n        ...\n        <Portal />\n      </div>\n    )\n  }\n`\n","function Example() {\n  const [renderToPortal, setRenderToPortal] = React.useState(true);\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <div\n        id=\"dialog-portal-example\"\n        style={{\n          transform: 'translateZ(0)',\n          height: '20rem',\n          overflow: 'hidden'\n        }}\n      >\n        <SimpleDialog\n          title={`This is a ${\n            renderToPortal ? 'working!' : 'broken :/'\n          }`}\n          renderToPortal={renderToPortal}\n          body=\"Use `renderToPortal` to get around `overflow:hidden` and layout issues.\"\n          open={open}\n          onClose={(evt) => {\n            console.log(evt.detail.action);\n            setOpen(false);\n          }}\n        />\n\n        <Button\n          raised\n          onClick={() => {\n            setRenderToPortal(false);\n            setOpen(true);\n          }}\n        >\n          Open Broken :/\n        </Button>\n\n        <Button\n          raised\n          onClick={() => {\n            setRenderToPortal(true);\n            setOpen(true);\n          }}\n        >\n          Open in Portal\n        </Button>\n      </div>\n    </>\n  );\n}"]
{
  "npm": {},
  "typescript": {
    "CardProps": {
      "documentation": {
        "contents": [
          "<p>A Card Component</p>\n"
        ],
        "contentsRaw": "A Card Component",
        "metadata": {}
      },
      "fileName": "src/card/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "CardProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/card/index.tsx#L11",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Removes the shadow and displays a hairline outline instead</p>\n"
            ],
            "contentsRaw": "Removes the shadow and displays a hairline outline instead",
            "metadata": {}
          },
          "fileName": "src/card/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "outlined",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/card/index.tsx#L13",
          "type": "undefined | false | true"
        }
      ]
    },
    "CardMediaProps": {
      "documentation": {
        "contents": [
          "<p>Media area that displays a custom background-image with background-size: cover</p>\n"
        ],
        "contentsRaw": "Media area that displays a custom background-image with background-size: cover",
        "metadata": {}
      },
      "fileName": "src/card/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "CardMediaProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/card/index.tsx#L29",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Automatically scales the media area’s height according to its width, maintaining a 16:9 aspect ratio</p>\n"
            ],
            "contentsRaw": "Automatically scales the media area’s height according to its width, maintaining a 16:9 aspect ratio",
            "metadata": {}
          },
          "fileName": "src/card/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "sixteenByNine",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/card/index.tsx#L33",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Automatically scales the media area’s height to equal its width</p>\n"
            ],
            "contentsRaw": "Automatically scales the media area’s height to equal its width",
            "metadata": {}
          },
          "fileName": "src/card/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "square",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/card/index.tsx#L31",
          "type": "undefined | false | true"
        }
      ]
    },
    "CardMediaContentProps": {
      "documentation": {
        "contents": [
          "<p>An absolutely-positioned box the same size as the media area, for displaying a title or icon on top of the background-image</p>\n"
        ],
        "contentsRaw": "An absolutely-positioned box the same size as the media area, for displaying a title or icon on top of the background-image",
        "metadata": {}
      },
      "fileName": "src/card/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "CardMediaContentProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/card/index.tsx#L53",
      "methods": [],
      "properties": []
    },
    "CardPrimaryActionProps": {
      "documentation": {
        "contents": [
          "<p>The main clickable area for the primary content of the card</p>\n"
        ],
        "contentsRaw": "The main clickable area for the primary content of the card",
        "metadata": {}
      },
      "fileName": "src/card/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "CardPrimaryActionProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/card/index.tsx#L64",
      "methods": [],
      "properties": []
    },
    "CardActionsProps": {
      "documentation": {
        "contents": [
          "<p>Row containing action buttons and/or icons</p>\n"
        ],
        "contentsRaw": "Row containing action buttons and/or icons",
        "metadata": {}
      },
      "fileName": "src/card/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "CardActionsProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/card/index.tsx#L86",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Removes the action area’s padding and causes its only child (an mdc-card__action element) to consume 100% of the action area’s width</p>\n"
            ],
            "contentsRaw": "Removes the action area’s padding and causes its only child (an mdc-card__action element) to consume 100% of the action area’s width",
            "metadata": {}
          },
          "fileName": "src/card/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fullBleed",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/card/index.tsx#L88",
          "type": "undefined | false | true"
        }
      ]
    },
    "CardActionButtonsProps": {
      "documentation": {
        "contents": [
          "<p>A group of action buttons, displayed on the left side of the card (in LTR), adjacent to CardActionIcons</p>\n"
        ],
        "contentsRaw": "A group of action buttons, displayed on the left side of the card (in LTR), adjacent to CardActionIcons",
        "metadata": {}
      },
      "fileName": "src/card/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "CardActionButtonsProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/card/index.tsx#L104",
      "methods": [],
      "properties": []
    },
    "CardActionIconsProps": {
      "documentation": {
        "contents": [
          "<p>A group of supplemental action icons, displayed on the right side of the card (in LTR), adjacent to CardActionButtons</p>\n"
        ],
        "contentsRaw": "A group of supplemental action icons, displayed on the right side of the card (in LTR), adjacent to CardActionButtons",
        "metadata": {}
      },
      "fileName": "src/card/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "CardActionIconsProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/card/index.tsx#L115",
      "methods": [],
      "properties": []
    },
    "CardActionIconProps": {
      "documentation": {
        "contents": [
          "<p>A card action Icon</p>\n"
        ],
        "contentsRaw": "A card action Icon",
        "metadata": {}
      },
      "fileName": "src/card/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "CardActionIconProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/card/index.tsx#L126",
      "extends": [
        "IconButtonProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Controls the on / off state of the a toggleable button.</p>\n"
            ],
            "contentsRaw": "Controls the on / off state of the a toggleable button.",
            "metadata": {}
          },
          "fileName": "src/icon-button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "checked",
          "inheritedFrom": "IconButtonProps.checked",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Makes the button disabled</p>\n"
            ],
            "contentsRaw": "Makes the button disabled",
            "metadata": {}
          },
          "fileName": "src/icon-button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "inheritedFrom": "IconButtonProps.disabled",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Advanced: A reference to the MDCFoundation. Only for Toggleable buttons.</p>\n"
            ],
            "contentsRaw": "Advanced: A reference to the MDCFoundation. Only for Toggleable buttons.",
            "metadata": {}
          },
          "fileName": "src/icon-button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "foundationRef",
          "inheritedFrom": "IconButtonProps.foundationRef",
          "type": "React.Ref<MDCIconButtonToggleFoundation>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Icon for the button</p>\n"
            ],
            "contentsRaw": "Icon for the button",
            "metadata": {}
          },
          "fileName": "src/icon-button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "inheritedFrom": "IconButtonProps.icon",
          "type": "RMWC.IconPropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>Apply an aria label.</p>\n"
            ],
            "contentsRaw": "Apply an aria label.",
            "metadata": {}
          },
          "fileName": "src/icon-button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "inheritedFrom": "IconButtonProps.label",
          "type": "undefined | string"
        },
        {
          "documentation": {
            "contents": [
              "<p>An onChange callback that receives a custom event. evt.detail = { isOn: boolean }</p>\n"
            ],
            "contentsRaw": "An onChange callback that receives a custom event. evt.detail = { isOn: boolean }",
            "metadata": {}
          },
          "fileName": "src/icon-button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "inheritedFrom": "IconButtonProps.onChange",
          "type": "undefined | (evt: IconButtonOnChangeEventT) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>If specified, renders a toggle with this icon as the on state.</p>\n"
            ],
            "contentsRaw": "If specified, renders a toggle with this icon as the on state.",
            "metadata": {}
          },
          "fileName": "src/icon-button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onIcon",
          "inheritedFrom": "IconButtonProps.onIcon",
          "type": "RMWC.IconPropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>Adds a ripple effect to the component</p>\n"
            ],
            "contentsRaw": "Adds a ripple effect to the component",
            "metadata": {}
          },
          "fileName": "src/types/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ripple",
          "inheritedFrom": "WithRippleProps.ripple",
          "type": "RipplePropT"
        }
      ]
    },
    "CardActionButtonProps": {
      "documentation": {
        "contents": [
          "<p>A card action Button</p>\n"
        ],
        "contentsRaw": "A card action Button",
        "metadata": {}
      },
      "fileName": "src/card/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "CardActionButtonProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/card/index.tsx#L140",
      "extends": [
        "ButtonProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Content specified as children.</p>\n"
            ],
            "contentsRaw": "Content specified as children.",
            "metadata": {}
          },
          "fileName": "src/button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "inheritedFrom": "ButtonProps.children",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Used to indicate a dangerous action.</p>\n"
            ],
            "contentsRaw": "Used to indicate a dangerous action.",
            "metadata": {}
          },
          "fileName": "src/button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "danger",
          "inheritedFrom": "ButtonProps.danger",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Make the Button dense.</p>\n"
            ],
            "contentsRaw": "Make the Button dense.",
            "metadata": {}
          },
          "fileName": "src/button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "dense",
          "inheritedFrom": "ButtonProps.dense",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Make the button disabled</p>\n"
            ],
            "contentsRaw": "Make the button disabled",
            "metadata": {}
          },
          "fileName": "src/button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "inheritedFrom": "ButtonProps.disabled",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>An Icon for the Button</p>\n"
            ],
            "contentsRaw": "An Icon for the Button",
            "metadata": {}
          },
          "fileName": "src/button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "inheritedFrom": "ButtonProps.icon",
          "type": "RMWC.IconPropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>Content specified as a label prop.</p>\n"
            ],
            "contentsRaw": "Content specified as a label prop.",
            "metadata": {}
          },
          "fileName": "src/button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "inheritedFrom": "ButtonProps.label",
          "type": "React.ReactNode | any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Make the button outlined.</p>\n"
            ],
            "contentsRaw": "Make the button outlined.",
            "metadata": {}
          },
          "fileName": "src/button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "outlined",
          "inheritedFrom": "ButtonProps.outlined",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Make the Button raised.</p>\n"
            ],
            "contentsRaw": "Make the Button raised.",
            "metadata": {}
          },
          "fileName": "src/button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "raised",
          "inheritedFrom": "ButtonProps.raised",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Adds a ripple effect to the component</p>\n"
            ],
            "contentsRaw": "Adds a ripple effect to the component",
            "metadata": {}
          },
          "fileName": "src/types/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ripple",
          "inheritedFrom": "WithRippleProps.ripple",
          "type": "RipplePropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>Makes the button more touch friendly. This will automatically be set true if used inside of TouchTargetWrapper.</p>\n"
            ],
            "contentsRaw": "Makes the button more touch friendly. This will automatically be set true if used inside of TouchTargetWrapper.",
            "metadata": {}
          },
          "fileName": "src/button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "touch",
          "inheritedFrom": "ButtonProps.touch",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>A trailing icon for the Button</p>\n"
            ],
            "contentsRaw": "A trailing icon for the Button",
            "metadata": {}
          },
          "fileName": "src/button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "trailingIcon",
          "inheritedFrom": "ButtonProps.trailingIcon",
          "type": "RMWC.IconPropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>Make the button unelevated.</p>\n"
            ],
            "contentsRaw": "Make the button unelevated.",
            "metadata": {}
          },
          "fileName": "src/button/dist/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "unelevated",
          "inheritedFrom": "ButtonProps.unelevated",
          "type": "undefined | false | true"
        }
      ]
    }
  }
}

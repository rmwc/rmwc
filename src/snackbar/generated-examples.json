["function Example() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <Snackbar\n        open={open}\n        onClose={(evt) => setOpen(false)}\n        message=\"This is a new message\"\n        dismissesOnAction\n        action={\n          <SnackbarAction\n            label=\"Dismiss\"\n            onClick={() => console.log('Click Me')}\n          />\n        }\n      />\n\n      <Button\n        raised\n        label=\"Show snackbar\"\n        onClick={(evt) => setOpen(!open)}\n      />\n    </>\n  );\n}","function Example() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <Snackbar\n        open={open}\n        onClose={(evt) => setOpen(false)}\n        message=\"Start aligned, open until dismissed\"\n        stacked\n        dismissesOnAction\n        action={[\n          <SnackbarAction label=\"Yeah!\" />,\n          <SnackbarAction label=\"No...\" />\n        ]}\n        leading\n        timeout={-1}\n      />\n\n      <Button\n        raised\n        label=\"Show start-aligned\"\n        onClick={(evt) => setOpen(!open)}\n      />\n    </>\n  );\n}","\n  `\n// Create a file that exports your queue\n// myQueue.js\nimport { createSnackbarQueue } from '@rmwc/snackbar';\n\nexport const queue = createSnackbarQueue();\n\n","\n  `\n// Somewhere at the top level of your app\n// Render the SnackbarQueue\nimport React from 'react';\nimport { queue } from './myQueue';\n\nexport default function App() {\n  return (\n    <div>\n      ...\n      <SnackbarQueue\n        messages={queue.messages}\n        // You can also pass default options to pass to your notifications\n        // ie, make them all leading, stacked, etc\n        leading\n        stacked\n      />\n    </div>\n  )\n}\n\n\n","\n  `\n// Somewhere else in your app\n// Could be a view, your redux store, anywhere you want...\nimport { queue } from './myQueue';\n\n// Simple example\nqueue.notify({\n  title: 'Hi there'\n});\n\n// With some features\nqueue.notify({\n  title: <b>Warning</b>,\n  body: 'You have selected pizza instead icecream!',\n  icon: 'warning',\n  actions: [\n    {\n      // NotificationAction api format\n      title: 'Fix It!',\n      icon: 'close',\n      action: 'fixit' // action will be available as evt.detail.reason in the onClose event\n    },\n    {\n      // OR SnackbarActionProps format\n      label: 'Continue...',\n      icon: 'check',\n      onClick: () => {}\n    },\n  ]\n});\n\n","() => {\n  const { messages, notify } = createSnackbarQueue();\n\n  function App() {\n    return (\n      <div>\n        <Button\n          label=\"Notify\"\n          onClick={() =>\n            notify({\n              title: <b>Success</b>,\n              body: 'You have selected pizza!',\n              dismissesOnAction: true,\n              icon: 'check',\n              actions: [\n                {\n                  title: 'Dismiss'\n                }\n              ]\n            })\n          }\n        />\n        <SnackbarQueue messages={messages} />\n      </div>\n    );\n  }\n  return <App />;\n}"]